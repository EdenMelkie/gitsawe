import 'package:flutter/material.dart';
import 'database_helper.dart';

class FillPage extends StatefulWidget {
  const FillPage({super.key});

  @override
  State<FillPage> createState() => _FillPageState();
}

class _FillPageState extends State<FillPage> {
  final _formKey = GlobalKey<FormState>();

  final _dateController = TextEditingController();
  final _paulController = TextEditingController();
  final _epistleController = TextEditingController();
  final _actsController = TextEditingController();
  final _psalmController = TextEditingController();
  final _gospelController = TextEditingController();
  final _liturgyController = TextEditingController();
  final _fetchDateController = TextEditingController();
  String _fetchedResult = '';

  Future<void> _insertData() async {
    if (_formKey.currentState!.validate()) {
      final data = {
        '·âÄ·äï': _dateController.text,
        '·ã®·å≥·ãç·àé·àµ_·àò·àç·ä•·ä≠·âµ': _paulController.text,
        '·àò·àç·ä•·ä≠·âµ': _epistleController.text,
        '·ã®·àê·ãã·à≠·ã´·âµ_·à•·à´': _actsController.text,
        '·àò·ãù·àô·à®_·ã≥·ãä·âµ': _psalmController.text,
        '·ãà·äï·åå·àç': _gospelController.text,
        '·âÖ·ã≥·à¥': _liturgyController.text,
      };

      await DatabaseHelper.instance.insertData(data);
      ScaffoldMessenger.of(context).showSnackBar(SnackBar(content: Text('·â†·âµ·ä≠·ä≠·àç ·â≥·ãµ·à∑·àç·ç¢')));
    }
  }

  Future<void> _fetchData() async {
    final date = _fetchDateController.text;
    final result = await DatabaseHelper.instance.getDataByDate(date);

    setState(() {
      if (result != null) {
        _fetchedResult = '''
·âÄ·äï: ${result['·âÄ·äï']}
·ã®·å≥·ãç·àé·àµ ·àò·àç·ä•·ä≠·âµ: ${result['·ã®·å≥·ãç·àé·àµ_·àò·àç·ä•·ä≠·âµ']}
·àò·àç·ä•·ä≠·âµ: ${result['·àò·àç·ä•·ä≠·âµ']}
·ã®·àê·ãã·à≠·ã´·âµ ·à•·à´: ${result['·ã®·àê·ãã·à≠·ã´·âµ_·à•·à´']}
·àò·ãù·àô·à® ·ã≥·ãä·âµ: ${result['·àò·ãù·àô·à®_·ã≥·ãä·âµ']}
·ãà·äï·åå·àç: ${result['·ãà·äï·åå·àç']}
·âÖ·ã≥·à¥: ${result['·âÖ·ã≥·à¥']}
        ''';
      } else {
        _fetchedResult = '·àù·äï·àù ·ãç·àÇ·â• ·ä†·àç·â∞·åà·äò·àù·ç¢';
      }
    });
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(title: Text('Gitsawe - ·àò·ãù·åà·â• ·ä•·äì ·çç·àà·åã')),
      body: SingleChildScrollView(
        padding: EdgeInsets.all(16),
        child: Column(
          children: [
            Text('üîπ ·àò·àô·ã´ ·âÖ·åΩ', style: TextStyle(fontSize: 20, fontWeight: FontWeight.bold)),
            Form(
              key: _formKey,
              child: Column(
                children: [
                  _buildInput(_dateController, '·âÄ·äï (e.g. 2/3/2015)'),
                  _buildInput(_paulController, '·ã®·å≥·ãç·àé·àµ ·àò·àç·ä•·ä≠·âµ'),
                  _buildInput(_epistleController, '·àò·àç·ä•·ä≠·âµ'),
                  _buildInput(_actsController, '·ã®·àê·ãã·à≠·ã´·âµ ·à•·à´'),
                  _buildInput(_psalmController, '·àò·ãù·àô·à® ·ã≥·ãä·âµ'),
                  _buildInput(_gospelController, '·ãà·äï·åå·àç'),
                  _buildInput(_liturgyController, '·âÖ·ã≥·à¥'),
                  SizedBox(height: 10),
                  ElevatedButton(onPressed: _insertData, child: Text('·ã´·àµ·åà·â°')),
                ],
              ),
            ),
            Divider(height: 40),
            Text('üîç ·ã®·âÄ·äï ·àò·à®·åÉ ·çç·àà·åã', style: TextStyle(fontSize: 20, fontWeight: FontWeight.bold)),
            TextField(
              controller: _fetchDateController,
              decoration: InputDecoration(labelText: '·âÄ·äï ·ã´·àµ·åà·â° (e.g. 2/3/2015)'),
            ),
            SizedBox(height: 10),
            ElevatedButton(onPressed: _fetchData, child: Text('·çà·àç·åç')),
            SizedBox(height: 20),
            Text(_fetchedResult, style: TextStyle(fontSize: 16)),
          ],
        ),
      ),
    );
  }

  Widget _buildInput(TextEditingController controller, String label) {
    return Padding(
      padding: const EdgeInsets.symmetric(vertical: 6.0),
      child: TextFormField(
        controller: controller,
        validator: (val) => val == null || val.isEmpty ? '·ä•·â£·ä≠·ãé $label ·ã´·àµ·åà·â°' : null,
        decoration: InputDecoration(labelText: label, border: OutlineInputBorder()),
      ),
    );
  }
}
